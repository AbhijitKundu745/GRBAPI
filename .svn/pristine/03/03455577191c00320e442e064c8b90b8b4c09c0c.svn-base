using log4net;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Linq;
using System.Web;

namespace PSL.Laundry.CentralService.Global
{
    public static class AppSettings
    {
        private static readonly ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        public static string ConnectionString { get; private set; }
        public static bool EmailNotification { get; private set; }
        public static bool SMSNotification { get; private set; }

        public static void loadAppSettings()
        {
            try
            {
                ConnectionString = ConfigurationManager.ConnectionStrings["connString"].ConnectionString.ToString().Trim();
                EmailNotification = Convert.ToBoolean(ConfigurationManager.AppSettings["EmailNotification"].ToString().Trim());
                SMSNotification = Convert.ToBoolean(ConfigurationManager.AppSettings["SMSNotification"].ToString().Trim());
                try
                {
                    SQLQueryCommand.loadSQLQueryCommands();
                }
                catch (Exception ex)
                {
                    Log.Error("Error while loading query commands", ex);
                }

                try
                {
                    EmailSettings.LoadEmailSettings();
                }
                catch (Exception ex)
                {
                    Log.Error("Error while loading email settings", ex);
                }

                try
                {
                    SMSSettings.LoadSMSSettings();
                }
                catch (Exception ex)
                {
                    Log.Error("Error while loading sms settings", ex);
                }
            }
            catch (Exception ex)
            {
                Log.Error("Error in loadAppSettings", ex);
            }
        }

        public static class EmailSettings
        {
            public static string host { get; private set; }
            public static int port { get; private set; } = 0;
            public static bool enableSSL { get; private set; } = false;
            public static bool UseDefaultCredentials { get; private set; } = false;
            public static string username { get; private set; }
            public static string password { get; private set; }
            public static int timeout { get; private set; } = 5000;
            public static string fromMailID { get; private set; }
            public static List<string> toMailIDs { get; private set; }
            public static List<string> ccMailIDs { get; private set; }

            public static void LoadEmailSettings()
            {
                try
                {
                    if (!EmailNotification)
                        return;

                    var emailSettings = ConfigurationManager.GetSection("emailSettings") as NameValueCollection;
                    if (emailSettings != null && emailSettings.HasKeys())
                    {
                        if (emailSettings.AllKeys.Contains("host"))
                        {
                            host = Convert.ToString(emailSettings["host"]);
                        }
                        if (emailSettings.AllKeys.Contains("port"))
                        {
                            port = Convert.ToInt32(emailSettings["port"]);
                        }
                        if (emailSettings.AllKeys.Contains("enableSSL"))
                        {
                            enableSSL = Convert.ToBoolean(emailSettings["enableSSL"]);
                        }
                        if (emailSettings.AllKeys.Contains("UseDefaultCredentials"))
                        {
                            UseDefaultCredentials = Convert.ToBoolean(emailSettings["UseDefaultCredentials"]);
                        }
                        if (emailSettings.AllKeys.Contains("username"))
                        {
                            username = Convert.ToString(emailSettings["username"]);
                        }
                        if (emailSettings.AllKeys.Contains("password"))
                        {
                            password = Convert.ToString(emailSettings["password"]);
                        }
                        if (emailSettings.AllKeys.Contains("timeout"))
                        {
                            timeout = Convert.ToInt32(emailSettings["timeout"]);
                        }
                        if (emailSettings.AllKeys.Contains("fromMailID"))
                        {
                            fromMailID = Convert.ToString(emailSettings["fromMailID"]);
                        }
                        if (emailSettings.AllKeys.Contains("toMailIDs"))
                        {
                            string to = Convert.ToString(emailSettings["toMailIDs"]);
                            if (!string.IsNullOrEmpty(to))
                            {
                                toMailIDs = to.Split(',').ToList();
                            }
                        }
                        if (emailSettings.AllKeys.Contains("ccMailIDs"))
                        {
                            string CC = Convert.ToString(emailSettings["ccMailIDs"]);
                            if (!string.IsNullOrEmpty(CC))
                            {
                                ccMailIDs = CC.Split(',').ToList();
                            }
                        }

                    }

                    if (string.IsNullOrEmpty(AppSettings.EmailSettings.username) ||
                        string.IsNullOrEmpty(AppSettings.EmailSettings.password) || string.IsNullOrEmpty(AppSettings.EmailSettings.host))
                        throw new Exception("could not send mail because of invalid parameters..please check parameters");
                }
                catch (Exception ex)
                {
                    //EmailNotification = false;
                    throw new Exception("Error at loading mailSettings" + ex.Message);
                }
            }

        }

        public static class StoredProcedure
        {

            //Login
            public static string GetUserDetails { get; set; } = "Prc_GetUserLogin";

            //AssetRegUC
            public static string GetAllAsset { get; set; } = "PSL_GetAllAssets";
            public static string DeleteRegisteredAssets { get; set; } = "Prc_DeleteRegisteredAsset";
            public static string UpdateRegisteredAssets { get; set; } = "Prc_UpdateRegisteredAsset";
            public static string GetAssetTypeByCustomer { get; set; } = "Prc_GetAssetTypeByCustomer";
            public static string InsertAssetRegistration { get; set; } = "Prc_InsertAssetRegistration";


            //AssetMapping

            public static string GetAssetsForMapping { get; set; } = "Prc_GetAssetsForMapping";
            public static string GetRegisteredAssets { get; set; } = "Prc_GetRegisteredAssets";
            public static string GetSID { get; set; } = "Prc_GetSID";
            public static string MapAssets { get; set; } = "Prc_MapAssets";

            //Processes
            public static string GetVendors { get; set; } = "Prc_GetVendors";
            public static string GetAssetLife { get; set; } = "Prc_GetAssetLife";
            public static string InsertActivity { get; set; } = "Prc_InsertActivity";
            public static string GetTagDetails { get; set; } = "Prc_GetTagDetails";
            public static string InsertActivityDetails { get; set; } = "Prc_InsertActivityDetails";
            public static string InsertErrorActivity { get; set; } = "Prc_InsertErrorActivity";
            public static string InsertSerialNo { get; internal set; } = "PSL_InsertSerialNo";
            public static string UpdateChipID { get; internal set; } = "PSL_UpdateChipID";
        }
        public static class SMSSettings
        {
            public static string url { get; private set; }
            public static string APIKey { get; private set; }
            public static string SenderId { get; private set; }
            public static void LoadSMSSettings()
            {
                try
                {
                    if (!SMSNotification)
                        return;

                    var smsSettings = ConfigurationManager.GetSection("smsSettings") as NameValueCollection;
                    if (smsSettings != null && smsSettings.HasKeys())
                    {
                        if (smsSettings.AllKeys.Contains("url"))
                        {
                            url = Convert.ToString(smsSettings["url"]);
                        }
                        if (smsSettings.AllKeys.Contains("APIKey"))
                        {
                            APIKey = Convert.ToString(smsSettings["APIKey"]);
                        }
                        if (smsSettings.AllKeys.Contains("SenderId"))
                        {
                            SenderId = Convert.ToString(smsSettings["SenderId"]);
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception("Error at loading smsSettings" + ex.Message);
                }
            }


        }

        public static class SQLQueryCommand
        {



            public static string SP_Get_CustomerDetails { get; private set; }
            public static string SP_Get_AllVendors { get; private set; }
            public static string SP_Get_AllAssetTypes { get; private set; }

            public static string SP_Get_AllAssets { get; private set; }
            public static string Login { get; private set; }
            public static string MobileLogin { get; private set; }

            public static string SP_Get_AllAssets_Mobile { get; private set; }
            







            public static string SP_Insert_ApprovalRecord { get; private set; }
            public static string SP_ApproveTransaction { get; private set; }
            public static string SP_Get_ApprovalRecord { get; private set; }
            public static string SP_Insert_Tripdetail { get; private set; }
            public static string SP_Insert_Transactiondetail { get; private set; }
            public static string SP_Get_CastDetails { get; private set; }
            public static string SP_Get_GETTasks { get; private set; }
            public static string SP_GET_TansactionTypes { get; private set; }
            public static string SP_GET_PDAUsers { get; private set; }
            public static string SP_GET_PDASourcePlants { get; private set; }
            public static string SP_GET_TouchPoints { get; private set; }
            public static string SP_GET_Locations { get; private set; }
            public static string SP_GET_PreviousTripDetails { get; private set; }
            public static string SP_GET_LastTripDetailsbyTruckID { get; set; }
            public static string SP_Insert_PDA_TripDetails { get; private set; }
            public static string SP_GET_NotificationConfiguration { get; private set; }


            public static void loadSQLQueryCommands()
            {
                try
                {

                    SP_Get_CustomerDetails = ConfigurationManager.AppSettings["SP_Get_CustomerDetails"].ToString().Trim();
                    SP_Get_AllVendors = ConfigurationManager.AppSettings["SP_Get_AllVendors"].ToString().Trim();
                    SP_Get_AllAssetTypes = ConfigurationManager.AppSettings["SP_Get_AllAssetTypes"].ToString().Trim();
                    SP_Get_AllAssets = ConfigurationManager.AppSettings["SP_Get_AllAssets"].ToString().Trim();
                    Login = ConfigurationManager.AppSettings["Login"].ToString().Trim();
                    MobileLogin = ConfigurationManager.AppSettings["MobileLogin"].ToString().Trim();
                    SP_Get_AllAssets_Mobile = ConfigurationManager.AppSettings["SP_Get_AllAssets_Mobile"].ToString().Trim();


                    SP_Get_ApprovalRecord = ConfigurationManager.AppSettings["SP_Get_ApprovalRecord"].ToString().Trim();
                    SP_Insert_ApprovalRecord = ConfigurationManager.AppSettings["SP_Insert_ApprovalRecord"].ToString().Trim();
                    SP_ApproveTransaction = ConfigurationManager.AppSettings["SP_ApproveTransaction"].ToString().Trim();
                    SP_Insert_Tripdetail = ConfigurationManager.AppSettings["SP_Insert_Tripdetail"].ToString().Trim();
                    SP_Insert_Transactiondetail = ConfigurationManager.AppSettings["SP_Insert_Transactiondetail"].ToString().Trim();
                    SP_Get_CastDetails = ConfigurationManager.AppSettings["SP_Get_CastDetails"].ToString().Trim();
                    SP_Get_GETTasks = ConfigurationManager.AppSettings["SP_Get_GETTasks"].ToString().Trim();
                    SP_GET_TansactionTypes = ConfigurationManager.AppSettings["SP_GET_TansactionTypes"].ToString().Trim();
                    SP_GET_PDAUsers = ConfigurationManager.AppSettings["SP_GET_PDAUsers"].ToString().Trim();
                    SP_GET_PDASourcePlants = ConfigurationManager.AppSettings["SP_GET_PDASourcePlants"].ToString().Trim();
                    SP_GET_TouchPoints = ConfigurationManager.AppSettings["SP_GET_TouchPoints"].ToString().Trim();
                    SP_GET_Locations = ConfigurationManager.AppSettings["SP_GET_locations"].ToString().Trim();
                    SP_GET_PreviousTripDetails = ConfigurationManager.AppSettings["SP_GET_PreviousTripDetails"].ToString().Trim();
                    SP_GET_LastTripDetailsbyTruckID = ConfigurationManager.AppSettings["SP_GET_LastTripDetailsbyTruckID"].ToString().Trim();
                    SP_Insert_PDA_TripDetails = ConfigurationManager.AppSettings["SP_Insert_PDA_TripDetails"].ToString().Trim();
                    SP_GET_NotificationConfiguration = ConfigurationManager.AppSettings["SP_GET_NotificationConfiguration"].ToString().Trim();

                }
                catch (Exception ex)
                {
                    throw new Exception("Error in loadSQLQueryCommands" + ex.Message);
                }
            }

        }

    }

}
