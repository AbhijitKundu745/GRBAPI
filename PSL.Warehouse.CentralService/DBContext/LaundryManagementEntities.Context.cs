//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PSL.Warehouse.CentralService.DBContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LaundryManagementEntities : DbContext
    {
        public LaundryManagementEntities()
            : base("name=LaundryManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityDetail> ActivityDetails { get; set; }
        public virtual DbSet<AssetMaster> AssetMasters { get; set; }
        public virtual DbSet<AssetTypeCustomerMapping> AssetTypeCustomerMappings { get; set; }
        public virtual DbSet<AssetTypeMaster> AssetTypeMasters { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<DeviceMaster> DeviceMasters { get; set; }
        public virtual DbSet<SerialNumber> SerialNumbers { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Reader> Readers { get; set; }
        public virtual DbSet<ReadersTransactionLog> ReadersTransactionLogs { get; set; }
        public virtual DbSet<TouchPoint> TouchPoints { get; set; }
        public virtual DbSet<ErrorActivityDetail> ErrorActivityDetails { get; set; }
        public virtual DbSet<RoomMaster> RoomMasters { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<ipv6_database_firewall_rules> ipv6_database_firewall_rules { get; set; }
        public virtual DbSet<sysdiagram1> sysdiagram1 { get; set; }
        public virtual DbSet<AssetsIgnoreList> AssetsIgnoreLists { get; set; }
        public virtual DbSet<UserDetails> UserDetails { get; set; }
    
        public virtual int Prc_DeleteCustomerDevice(Nullable<System.Guid> deviceID)
        {
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_DeleteCustomerDevice", deviceIDParameter);
        }
    
        public virtual int Prc_DeleteRegisteredAsset(Nullable<System.Guid> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_DeleteRegisteredAsset", assetIDParameter);
        }
    
        public virtual ObjectResult<Prc_EOLLaundry_Result> Prc_EOLLaundry(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_EOLLaundry_Result>("Prc_EOLLaundry", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetAssetByActivity_Result> Prc_GetAssetByActivity(Nullable<System.Guid> customerID, Nullable<System.Guid> activityID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetAssetByActivity_Result>("Prc_GetAssetByActivity", customerIDParameter, activityIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Prc_GetAssetLife(Nullable<System.Guid> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Prc_GetAssetLife", assetIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetAssetsForMapping_Result> Prc_GetAssetsForMapping(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetAssetsForMapping_Result>("Prc_GetAssetsForMapping", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetAssetTypeByCustomer_Result> Prc_GetAssetTypeByCustomer(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetAssetTypeByCustomer_Result>("Prc_GetAssetTypeByCustomer", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetDashboardCountData_Result> Prc_GetDashboardCountData(string customerID)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetDashboardCountData_Result>("Prc_GetDashboardCountData", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetDeviceDetailsByCustomer_Result> Prc_GetDeviceDetailsByCustomer(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetDeviceDetailsByCustomer_Result>("Prc_GetDeviceDetailsByCustomer", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetRegisteredAssets_Result> Prc_GetRegisteredAssets(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetRegisteredAssets_Result>("Prc_GetRegisteredAssets", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetSID_Result> Prc_GetSID(Nullable<System.Guid> customerID, Nullable<long> serialNumber)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var serialNumberParameter = serialNumber.HasValue ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetSID_Result>("Prc_GetSID", customerIDParameter, serialNumberParameter);
        }
    
        public virtual ObjectResult<Prc_GetTagDetails_Result> Prc_GetTagDetails(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetTagDetails_Result>("Prc_GetTagDetails", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetUnkownAssetByActivity_Result> Prc_GetUnkownAssetByActivity(Nullable<System.Guid> customerID, Nullable<System.Guid> activityID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetUnkownAssetByActivity_Result>("Prc_GetUnkownAssetByActivity", customerIDParameter, activityIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetUserLogin_Result> Prc_GetUserLogin(string username, string password, string comapnyId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var comapnyIdParameter = comapnyId != null ?
                new ObjectParameter("ComapnyId", comapnyId) :
                new ObjectParameter("ComapnyId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetUserLogin_Result>("Prc_GetUserLogin", usernameParameter, passwordParameter, comapnyIdParameter);
        }
    
        public virtual ObjectResult<Prc_GetUserLoginWeb_Result> Prc_GetUserLoginWeb(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetUserLoginWeb_Result>("Prc_GetUserLoginWeb", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Prc_GetVendors_Result> Prc_GetVendors(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetVendors_Result>("Prc_GetVendors", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_InOutReport_Result> Prc_InOutReport(Nullable<System.DateTime> fromDateTime, Nullable<System.DateTime> toDateTime, Nullable<System.Guid> customerID, string activityType)
        {
            var fromDateTimeParameter = fromDateTime.HasValue ?
                new ObjectParameter("FromDateTime", fromDateTime) :
                new ObjectParameter("FromDateTime", typeof(System.DateTime));
    
            var toDateTimeParameter = toDateTime.HasValue ?
                new ObjectParameter("ToDateTime", toDateTime) :
                new ObjectParameter("ToDateTime", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_InOutReport_Result>("Prc_InOutReport", fromDateTimeParameter, toDateTimeParameter, customerIDParameter, activityTypeParameter);
        }
    
        public virtual int Prc_InsertActivity(string activityType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> transactionDateTime, Nullable<int> vendorID, Nullable<System.Guid> customerID, Nullable<int> touchPointID, Nullable<int> count, Nullable<System.Guid> uID, Nullable<System.Guid> activityID)
        {
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var transactionDateTimeParameter = transactionDateTime.HasValue ?
                new ObjectParameter("TransactionDateTime", transactionDateTime) :
                new ObjectParameter("TransactionDateTime", typeof(System.DateTime));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var touchPointIDParameter = touchPointID.HasValue ?
                new ObjectParameter("TouchPointID", touchPointID) :
                new ObjectParameter("TouchPointID", typeof(int));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_InsertActivity", activityTypeParameter, startDateParameter, endDateParameter, transactionDateTimeParameter, vendorIDParameter, customerIDParameter, touchPointIDParameter, countParameter, uIDParameter, activityIDParameter);
        }
    
        public virtual int Prc_InsertActivityDetails(Nullable<System.Guid> assetID, Nullable<System.Guid> activityID, Nullable<System.Guid> uID, string aState, Nullable<int> assetLife, Nullable<System.DateTime> lastInventoryDateTime)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(System.Guid));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            var aStateParameter = aState != null ?
                new ObjectParameter("AState", aState) :
                new ObjectParameter("AState", typeof(string));
    
            var assetLifeParameter = assetLife.HasValue ?
                new ObjectParameter("AssetLife", assetLife) :
                new ObjectParameter("AssetLife", typeof(int));
    
            var lastInventoryDateTimeParameter = lastInventoryDateTime.HasValue ?
                new ObjectParameter("LastInventoryDateTime", lastInventoryDateTime) :
                new ObjectParameter("LastInventoryDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_InsertActivityDetails", assetIDParameter, activityIDParameter, uIDParameter, aStateParameter, assetLifeParameter, lastInventoryDateTimeParameter);
        }
    
        public virtual int Prc_InsertAssetRegistration(string aName, string aDescription, Nullable<int> aTypeID, Nullable<bool> isActive, Nullable<System.Guid> uID, Nullable<System.Guid> customerID, Nullable<System.DateTime> transactionDateTime, Nullable<bool> isRegistered, Nullable<int> assetLife)
        {
            var aNameParameter = aName != null ?
                new ObjectParameter("AName", aName) :
                new ObjectParameter("AName", typeof(string));
    
            var aDescriptionParameter = aDescription != null ?
                new ObjectParameter("ADescription", aDescription) :
                new ObjectParameter("ADescription", typeof(string));
    
            var aTypeIDParameter = aTypeID.HasValue ?
                new ObjectParameter("ATypeID", aTypeID) :
                new ObjectParameter("ATypeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var transactionDateTimeParameter = transactionDateTime.HasValue ?
                new ObjectParameter("TransactionDateTime", transactionDateTime) :
                new ObjectParameter("TransactionDateTime", typeof(System.DateTime));
    
            var isRegisteredParameter = isRegistered.HasValue ?
                new ObjectParameter("IsRegistered", isRegistered) :
                new ObjectParameter("IsRegistered", typeof(bool));
    
            var assetLifeParameter = assetLife.HasValue ?
                new ObjectParameter("AssetLife", assetLife) :
                new ObjectParameter("AssetLife", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_InsertAssetRegistration", aNameParameter, aDescriptionParameter, aTypeIDParameter, isActiveParameter, uIDParameter, customerIDParameter, transactionDateTimeParameter, isRegisteredParameter, assetLifeParameter);
        }
    
        public virtual int Prc_InsertCustomerDevice(string clientDeviceID, string deviceName, Nullable<System.Guid> customerID)
        {
            var clientDeviceIDParameter = clientDeviceID != null ?
                new ObjectParameter("ClientDeviceID", clientDeviceID) :
                new ObjectParameter("ClientDeviceID", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_InsertCustomerDevice", clientDeviceIDParameter, deviceNameParameter, customerIDParameter);
        }
    
        public virtual int Prc_InsertErrorActivity(Nullable<System.Guid> activityID, string tagID)
        {
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(System.Guid));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_InsertErrorActivity", activityIDParameter, tagIDParameter);
        }
    
        public virtual int Prc_MapAssets(Nullable<int> assetTypeID, string tagID, Nullable<long> sID, string aTagID, Nullable<long> aSerialNo, Nullable<System.Guid> uID, Nullable<System.DateTime> transactionDateTime, Nullable<System.Guid> assetID, Nullable<bool> isRegistered)
        {
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(long));
    
            var aTagIDParameter = aTagID != null ?
                new ObjectParameter("ATagID", aTagID) :
                new ObjectParameter("ATagID", typeof(string));
    
            var aSerialNoParameter = aSerialNo.HasValue ?
                new ObjectParameter("ASerialNo", aSerialNo) :
                new ObjectParameter("ASerialNo", typeof(long));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            var transactionDateTimeParameter = transactionDateTime.HasValue ?
                new ObjectParameter("TransactionDateTime", transactionDateTime) :
                new ObjectParameter("TransactionDateTime", typeof(System.DateTime));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            var isRegisteredParameter = isRegistered.HasValue ?
                new ObjectParameter("IsRegistered", isRegistered) :
                new ObjectParameter("IsRegistered", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_MapAssets", assetTypeIDParameter, tagIDParameter, sIDParameter, aTagIDParameter, aSerialNoParameter, uIDParameter, transactionDateTimeParameter, assetIDParameter, isRegisteredParameter);
        }
    
        public virtual int Prc_MapAssetsToTag(string aTagID, Nullable<long> aSerialNo, Nullable<long> sID, Nullable<System.DateTime> transactionDateTime, Nullable<System.Guid> assetID)
        {
            var aTagIDParameter = aTagID != null ?
                new ObjectParameter("ATagID", aTagID) :
                new ObjectParameter("ATagID", typeof(string));
    
            var aSerialNoParameter = aSerialNo.HasValue ?
                new ObjectParameter("ASerialNo", aSerialNo) :
                new ObjectParameter("ASerialNo", typeof(long));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(long));
    
            var transactionDateTimeParameter = transactionDateTime.HasValue ?
                new ObjectParameter("TransactionDateTime", transactionDateTime) :
                new ObjectParameter("TransactionDateTime", typeof(System.DateTime));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_MapAssetsToTag", aTagIDParameter, aSerialNoParameter, sIDParameter, transactionDateTimeParameter, assetIDParameter);
        }
    
        public virtual ObjectResult<Prc_MissingLaundry_Result> Prc_MissingLaundry(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_MissingLaundry_Result>("Prc_MissingLaundry", customerIDParameter);
        }
    
        public virtual ObjectResult<Prc_MobileLogin_Result> Prc_MobileLogin(string username, string password, string clientDeviceId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var clientDeviceIdParameter = clientDeviceId != null ?
                new ObjectParameter("ClientDeviceId", clientDeviceId) :
                new ObjectParameter("ClientDeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_MobileLogin_Result>("Prc_MobileLogin", usernameParameter, passwordParameter, clientDeviceIdParameter);
        }
    
        public virtual ObjectResult<Prc_PendingLaundry_Result> Prc_PendingLaundry(Nullable<System.DateTime> fromDateTime, Nullable<System.DateTime> toDateTime, Nullable<System.Guid> customerID)
        {
            var fromDateTimeParameter = fromDateTime.HasValue ?
                new ObjectParameter("FromDateTime", fromDateTime) :
                new ObjectParameter("FromDateTime", typeof(System.DateTime));
    
            var toDateTimeParameter = toDateTime.HasValue ?
                new ObjectParameter("ToDateTime", toDateTime) :
                new ObjectParameter("ToDateTime", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_PendingLaundry_Result>("Prc_PendingLaundry", fromDateTimeParameter, toDateTimeParameter, customerIDParameter);
        }
    
        public virtual int Prc_UpdateCustomerDevice(string clientDeviceID, string deviceName, Nullable<System.Guid> deviceID)
        {
            var clientDeviceIDParameter = clientDeviceID != null ?
                new ObjectParameter("ClientDeviceID", clientDeviceID) :
                new ObjectParameter("ClientDeviceID", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("DeviceName", deviceName) :
                new ObjectParameter("DeviceName", typeof(string));
    
            var deviceIDParameter = deviceID.HasValue ?
                new ObjectParameter("DeviceID", deviceID) :
                new ObjectParameter("DeviceID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_UpdateCustomerDevice", clientDeviceIDParameter, deviceNameParameter, deviceIDParameter);
        }
    
        public virtual int Prc_UpdateRegisteredAsset(string aName, string aDescription, Nullable<bool> isActive, Nullable<System.Guid> assetID)
        {
            var aNameParameter = aName != null ?
                new ObjectParameter("AName", aName) :
                new ObjectParameter("AName", typeof(string));
    
            var aDescriptionParameter = aDescription != null ?
                new ObjectParameter("ADescription", aDescription) :
                new ObjectParameter("ADescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_UpdateRegisteredAsset", aNameParameter, aDescriptionParameter, isActiveParameter, assetIDParameter);
        }
    
        public virtual int PSL_AssetRegistrationMobile(Nullable<int> assetTypeID, string tagID, Nullable<long> sID, string aTagID, Nullable<long> aSerialNo, Nullable<System.Guid> uID, Nullable<System.DateTime> transactionDateTime, Nullable<System.Guid> assetID)
        {
            var assetTypeIDParameter = assetTypeID.HasValue ?
                new ObjectParameter("AssetTypeID", assetTypeID) :
                new ObjectParameter("AssetTypeID", typeof(int));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("TagID", tagID) :
                new ObjectParameter("TagID", typeof(string));
    
            var sIDParameter = sID.HasValue ?
                new ObjectParameter("SID", sID) :
                new ObjectParameter("SID", typeof(long));
    
            var aTagIDParameter = aTagID != null ?
                new ObjectParameter("ATagID", aTagID) :
                new ObjectParameter("ATagID", typeof(string));
    
            var aSerialNoParameter = aSerialNo.HasValue ?
                new ObjectParameter("ASerialNo", aSerialNo) :
                new ObjectParameter("ASerialNo", typeof(long));
    
            var uIDParameter = uID.HasValue ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(System.Guid));
    
            var transactionDateTimeParameter = transactionDateTime.HasValue ?
                new ObjectParameter("TransactionDateTime", transactionDateTime) :
                new ObjectParameter("TransactionDateTime", typeof(System.DateTime));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_AssetRegistrationMobile", assetTypeIDParameter, tagIDParameter, sIDParameter, aTagIDParameter, aSerialNoParameter, uIDParameter, transactionDateTimeParameter, assetIDParameter);
        }
    
        public virtual int PSL_AssetTypeCustomerMapping(Nullable<int> atypeID, Nullable<System.Guid> customerID, Nullable<int> endOflife, Nullable<double> billingamount)
        {
            var atypeIDParameter = atypeID.HasValue ?
                new ObjectParameter("AtypeID", atypeID) :
                new ObjectParameter("AtypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var endOflifeParameter = endOflife.HasValue ?
                new ObjectParameter("endOflife", endOflife) :
                new ObjectParameter("endOflife", typeof(int));
    
            var billingamountParameter = billingamount.HasValue ?
                new ObjectParameter("billingamount", billingamount) :
                new ObjectParameter("billingamount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_AssetTypeCustomerMapping", atypeIDParameter, customerIDParameter, endOflifeParameter, billingamountParameter);
        }
    
        public virtual int PSL_customer(Nullable<System.Guid> custId)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_customer", custIdParameter);
        }
    
        public virtual int PSL_DeleteassetType(Nullable<int> assetID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("assetID", assetID) :
                new ObjectParameter("assetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_DeleteassetType", assetIDParameter);
        }
    
        public virtual int PSL_DeleteAssetTypeCustMap(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_DeleteAssetTypeCustMap", iDParameter);
        }
    
        public virtual int PSL_DeleteCustomer(Nullable<System.Guid> custID)
        {
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("custID", custID) :
                new ObjectParameter("custID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_DeleteCustomer", custIDParameter);
        }
    
        public virtual int PSL_DeleteUser(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_DeleteUser", userIDParameter);
        }
    
        public virtual int PSL_DeleteVendor(Nullable<int> venID)
        {
            var venIDParameter = venID.HasValue ?
                new ObjectParameter("VenID", venID) :
                new ObjectParameter("VenID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_DeleteVendor", venIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetAllAssets_Result> PSL_GetAllAssets(string tenantID)
        {
            var tenantIDParameter = tenantID != null ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAllAssets_Result>("PSL_GetAllAssets", tenantIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetAllAssetsForMobile_Result> PSL_GetAllAssetsForMobile(string tenantID)
        {
            var tenantIDParameter = tenantID != null ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAllAssetsForMobile_Result>("PSL_GetAllAssetsForMobile", tenantIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetAllAssetTypes_Result> PSL_GetAllAssetTypes(string tenantID)
        {
            var tenantIDParameter = tenantID != null ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAllAssetTypes_Result>("PSL_GetAllAssetTypes", tenantIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetAllCustomers_Result> PSL_GetAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAllCustomers_Result>("PSL_GetAllCustomers");
        }
    
        public virtual ObjectResult<PSL_GetAllVendors_Result> PSL_GetAllVendors(string tenantID)
        {
            var tenantIDParameter = tenantID != null ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAllVendors_Result>("PSL_GetAllVendors", tenantIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetAssetType_Result> PSL_GetAssetType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAssetType_Result>("PSL_GetAssetType");
        }
    
        public virtual ObjectResult<PSL_GetAssetTypeCustMapping_Result> PSL_GetAssetTypeCustMapping(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAssetTypeCustMapping_Result>("PSL_GetAssetTypeCustMapping", customerIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetAssetTypeList_Result> PSL_GetAssetTypeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAssetTypeList_Result>("PSL_GetAssetTypeList");
        }
    
        public virtual ObjectResult<PSL_GetCustomerforSerialNo_Result> PSL_GetCustomerforSerialNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetCustomerforSerialNo_Result>("PSL_GetCustomerforSerialNo");
        }
    
        public virtual ObjectResult<PSL_getcustomerlist_Result> PSL_getcustomerlist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_getcustomerlist_Result>("PSL_getcustomerlist");
        }
    
        public virtual ObjectResult<PSL_getcustomersdetails_Result> PSL_getcustomersdetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_getcustomersdetails_Result>("PSL_getcustomersdetails");
        }
    
        public virtual ObjectResult<PSL_GetCustomerSerialNo_Result> PSL_GetCustomerSerialNo(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetCustomerSerialNo_Result>("PSL_GetCustomerSerialNo", customerIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetSerialNo_Result> PSL_GetSerialNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetSerialNo_Result>("PSL_GetSerialNo");
        }
    
        public virtual ObjectResult<Nullable<long>> PSL_GetSerialNumber(string customerID)
        {
            var customerIDParameter = customerID != null ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("PSL_GetSerialNumber", customerIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetUser_Result> PSL_GetUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetUser_Result>("PSL_GetUser");
        }
    
        public virtual ObjectResult<PSL_GetUserDetail_Result> PSL_GetUserDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetUserDetail_Result>("PSL_GetUserDetail");
        }
    
        public virtual ObjectResult<PSL_GetVendor_Result> PSL_GetVendor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetVendor_Result>("PSL_GetVendor");
        }
    
        public virtual int PSL_InsertAssetType(string assetname, string assetdisplay, string assetdesc, Nullable<bool> isactive)
        {
            var assetnameParameter = assetname != null ?
                new ObjectParameter("assetname", assetname) :
                new ObjectParameter("assetname", typeof(string));
    
            var assetdisplayParameter = assetdisplay != null ?
                new ObjectParameter("assetdisplay", assetdisplay) :
                new ObjectParameter("assetdisplay", typeof(string));
    
            var assetdescParameter = assetdesc != null ?
                new ObjectParameter("assetdesc", assetdesc) :
                new ObjectParameter("assetdesc", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_InsertAssetType", assetnameParameter, assetdisplayParameter, assetdescParameter, isactiveParameter);
        }
    
        public virtual int PSL_InsertSerialNo(Nullable<long> serialNo, string tagID, Nullable<System.Guid> customerID, Nullable<System.DateTime> servertime, string chipID)
        {
            var serialNoParameter = serialNo.HasValue ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(long));
    
            var tagIDParameter = tagID != null ?
                new ObjectParameter("tagID", tagID) :
                new ObjectParameter("tagID", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var servertimeParameter = servertime.HasValue ?
                new ObjectParameter("servertime", servertime) :
                new ObjectParameter("servertime", typeof(System.DateTime));
    
            var chipIDParameter = chipID != null ?
                new ObjectParameter("chipID", chipID) :
                new ObjectParameter("chipID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_InsertSerialNo", serialNoParameter, tagIDParameter, customerIDParameter, servertimeParameter, chipIDParameter);
        }
    
        public virtual int PSL_InsertUser(string username, string password, string firstname, string lastname, Nullable<System.Guid> custID, Nullable<bool> isActive, Nullable<System.DateTime> transactiontime)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("custID", custID) :
                new ObjectParameter("custID", typeof(System.Guid));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var transactiontimeParameter = transactiontime.HasValue ?
                new ObjectParameter("transactiontime", transactiontime) :
                new ObjectParameter("transactiontime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_InsertUser", usernameParameter, passwordParameter, firstnameParameter, lastnameParameter, custIDParameter, isActiveParameter, transactiontimeParameter);
        }
    
        public virtual int PSL_insertVendor(string name, string location, Nullable<System.Guid> custID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var custIDParameter = custID.HasValue ?
                new ObjectParameter("CustID", custID) :
                new ObjectParameter("CustID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_insertVendor", nameParameter, locationParameter, custIDParameter);
        }
    
        public virtual int PSL_UpdateAssetType(string assetname, string assetdisplay, string assetdesc, Nullable<bool> isactive, Nullable<int> assetID)
        {
            var assetnameParameter = assetname != null ?
                new ObjectParameter("assetname", assetname) :
                new ObjectParameter("assetname", typeof(string));
    
            var assetdisplayParameter = assetdisplay != null ?
                new ObjectParameter("assetdisplay", assetdisplay) :
                new ObjectParameter("assetdisplay", typeof(string));
    
            var assetdescParameter = assetdesc != null ?
                new ObjectParameter("assetdesc", assetdesc) :
                new ObjectParameter("assetdesc", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("assetID", assetID) :
                new ObjectParameter("assetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_UpdateAssetType", assetnameParameter, assetdisplayParameter, assetdescParameter, isactiveParameter, assetIDParameter);
        }
    
        public virtual int PSL_UpdateAssetTypeCustomerMapping(Nullable<int> id, Nullable<int> atypeID, Nullable<System.Guid> customerID, Nullable<double> billingamount, Nullable<int> endOflife)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var atypeIDParameter = atypeID.HasValue ?
                new ObjectParameter("AtypeID", atypeID) :
                new ObjectParameter("AtypeID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var billingamountParameter = billingamount.HasValue ?
                new ObjectParameter("billingamount", billingamount) :
                new ObjectParameter("billingamount", typeof(double));
    
            var endOflifeParameter = endOflife.HasValue ?
                new ObjectParameter("endOflife", endOflife) :
                new ObjectParameter("endOflife", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_UpdateAssetTypeCustomerMapping", idParameter, atypeIDParameter, customerIDParameter, billingamountParameter, endOflifeParameter);
        }
    
        public virtual int PSL_UpdateCustomer(Nullable<System.Guid> customerID, string customername, Nullable<int> compCode, string email, string phone, string address, Nullable<bool> isactive)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(System.Guid));
    
            var customernameParameter = customername != null ?
                new ObjectParameter("Customername", customername) :
                new ObjectParameter("Customername", typeof(string));
    
            var compCodeParameter = compCode.HasValue ?
                new ObjectParameter("compCode", compCode) :
                new ObjectParameter("compCode", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_UpdateCustomer", customerIDParameter, customernameParameter, compCodeParameter, emailParameter, phoneParameter, addressParameter, isactiveParameter);
        }
    
        public virtual int PSL_UpdateVendor(string name, string location, Nullable<int> venID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var venIDParameter = venID.HasValue ?
                new ObjectParameter("venID", venID) :
                new ObjectParameter("venID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_UpdateVendor", nameParameter, locationParameter, venIDParameter);
        }
    
        public virtual int PSL_User(string username, string password, string firstname, string lastname, Nullable<bool> isActive, Nullable<System.Guid> userID)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_User", usernameParameter, passwordParameter, firstnameParameter, lastnameParameter, isActiveParameter, userIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int st_insertCustomer(string custoName, Nullable<int> custCode, string email, string phone, string address, Nullable<bool> isactive)
        {
            var custoNameParameter = custoName != null ?
                new ObjectParameter("CustoName", custoName) :
                new ObjectParameter("CustoName", typeof(string));
    
            var custCodeParameter = custCode.HasValue ?
                new ObjectParameter("custCode", custCode) :
                new ObjectParameter("custCode", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("st_insertCustomer", custoNameParameter, custCodeParameter, emailParameter, phoneParameter, addressParameter, isactiveParameter);
        }
    
        public virtual int Prc_DeleteRoom(Nullable<System.Guid> roomID)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_DeleteRoom", roomIDParameter);
        }
    
        public virtual ObjectResult<Prc_GetRoomsByCustomer_Result> Prc_GetRoomsByCustomer(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_GetRoomsByCustomer_Result>("Prc_GetRoomsByCustomer", customerIDParameter);
        }
    
        public virtual int Prc_InsertRooms(string roomNo, string roomDesc, Nullable<System.Guid> customerID)
        {
            var roomNoParameter = roomNo != null ?
                new ObjectParameter("RoomNo", roomNo) :
                new ObjectParameter("RoomNo", typeof(string));
    
            var roomDescParameter = roomDesc != null ?
                new ObjectParameter("RoomDesc", roomDesc) :
                new ObjectParameter("RoomDesc", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_InsertRooms", roomNoParameter, roomDescParameter, customerIDParameter);
        }
    
        public virtual int Prc_UpdateRoom(string roomNo, string roomDesc, Nullable<System.Guid> roomID)
        {
            var roomNoParameter = roomNo != null ?
                new ObjectParameter("RoomNo", roomNo) :
                new ObjectParameter("RoomNo", typeof(string));
    
            var roomDescParameter = roomDesc != null ?
                new ObjectParameter("RoomDesc", roomDesc) :
                new ObjectParameter("RoomDesc", typeof(string));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_UpdateRoom", roomNoParameter, roomDescParameter, roomIDParameter);
        }
    
        public virtual int PSL_UpdateChipID(string tagID, Nullable<System.Guid> customerID, string chipID)
        {
            var tagIDParameter = tagID != null ?
                new ObjectParameter("tagID", tagID) :
                new ObjectParameter("tagID", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var chipIDParameter = chipID != null ?
                new ObjectParameter("chipID", chipID) :
                new ObjectParameter("chipID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PSL_UpdateChipID", tagIDParameter, customerIDParameter, chipIDParameter);
        }
    
        public virtual ObjectResult<Prc_DesktopLogin_Result> Prc_DesktopLogin(string username, string password, string clientDeviceId)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var clientDeviceIdParameter = clientDeviceId != null ?
                new ObjectParameter("ClientDeviceId", clientDeviceId) :
                new ObjectParameter("ClientDeviceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_DesktopLogin_Result>("Prc_DesktopLogin", usernameParameter, passwordParameter, clientDeviceIdParameter);
        }
    
        public virtual int sp_alterdiagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram1(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram1", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition1_Result> sp_helpdiagramdefinition1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition1_Result>("sp_helpdiagramdefinition1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams1_Result> sp_helpdiagrams1(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams1_Result>("sp_helpdiagrams1", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram1(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram1", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams1");
        }
    
        public virtual ObjectResult<Prc_RoomCheckOutReport_Result> Prc_RoomCheckOutReport(Nullable<System.DateTime> fromDateTime, Nullable<System.DateTime> toDateTime, Nullable<System.Guid> customerID, string activityType)
        {
            var fromDateTimeParameter = fromDateTime.HasValue ?
                new ObjectParameter("FromDateTime", fromDateTime) :
                new ObjectParameter("FromDateTime", typeof(System.DateTime));
    
            var toDateTimeParameter = toDateTime.HasValue ?
                new ObjectParameter("ToDateTime", toDateTime) :
                new ObjectParameter("ToDateTime", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Prc_RoomCheckOutReport_Result>("Prc_RoomCheckOutReport", fromDateTimeParameter, toDateTimeParameter, customerIDParameter, activityTypeParameter);
        }
    
        public virtual int Prc_UpdateActivity(Nullable<System.Guid> activityID, Nullable<bool> isProcessed, Nullable<bool> isAllowed)
        {
            var activityIDParameter = activityID.HasValue ?
                new ObjectParameter("ActivityID", activityID) :
                new ObjectParameter("ActivityID", typeof(System.Guid));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var isAllowedParameter = isAllowed.HasValue ?
                new ObjectParameter("IsAllowed", isAllowed) :
                new ObjectParameter("IsAllowed", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_UpdateActivity", activityIDParameter, isProcessedParameter, isAllowedParameter);
        }
    
        public virtual ObjectResult<PSL_GetAllRCOAssets_Result> PSL_GetAllRCOAssets(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAllRCOAssets_Result>("PSL_GetAllRCOAssets", customerIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetAllRooms_Result> PSL_GetAllRooms(string tenantID)
        {
            var tenantIDParameter = tenantID != null ?
                new ObjectParameter("TenantID", tenantID) :
                new ObjectParameter("TenantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetAllRooms_Result>("PSL_GetAllRooms", tenantIDParameter);
        }
    
        public virtual int Prc_Insert_AssetIgnoreList(Nullable<System.Guid> assetID, string tagId, Nullable<bool> isProcessed, Nullable<bool> isAllowed, Nullable<System.Guid> customerID)
        {
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(System.Guid));
    
            var tagIdParameter = tagId != null ?
                new ObjectParameter("TagId", tagId) :
                new ObjectParameter("TagId", typeof(string));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var isAllowedParameter = isAllowed.HasValue ?
                new ObjectParameter("IsAllowed", isAllowed) :
                new ObjectParameter("IsAllowed", typeof(bool));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Prc_Insert_AssetIgnoreList", assetIDParameter, tagIdParameter, isProcessedParameter, isAllowedParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<PSL_GetTouchpoints_Result> PSL_GetTouchpoints(Nullable<System.Guid> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PSL_GetTouchpoints_Result>("PSL_GetTouchpoints", customerIDParameter);
        }
    }
}
